{"ast":null,"code":"var _jsxFileName = \"/Users/dhruv/AttendEase-Caffeine-Coders--1/FRONTEND/src/components/Lists/AttendanceList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AttendanceList = ({\n  contract,\n  account,\n  isStudentMode = false\n}) => {\n  _s();\n  const [studentAddresses, setStudentAddresses] = useState(isStudentMode ? [account] : []);\n  const [inputAddresses, setInputAddresses] = useState(\"\");\n  const [sectionId, setSectionId] = useState(\"\");\n  const [attendanceData, setAttendanceData] = useState([]);\n  const [threshold, setThreshold] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"above\"); // \"above\" or \"below\"\n  const [sortField, setSortField] = useState(\"percentage\"); // \"percentage\", \"attended\", \"total\"\n  const [sortOrder, setSortOrder] = useState(\"asc\"); // \"asc\" or \"desc\"\n  const [message, setMessage] = useState(\"\");\n  const [studentNames, setStudentNames] = useState({});\n  const fetchStudentsInSection = async section => {\n    try {\n      const sectionCounter = await contract.methods.sectionCounter().call({\n        from: account\n      });\n      if (parseInt(section) >= sectionCounter) {\n        setMessage(\"Invalid section ID.\");\n        return [];\n      }\n      const students = [];\n      const MAX_STUDENTS = 100;\n      for (let i = 0; i < MAX_STUDENTS; i++) {\n        const student = await contract.methods.sectionStudents(section, i).call({\n          from: account\n        });\n        if (student === \"0x0000000000000000000000000000000000000000\" || !student) break;\n        students.push(student);\n      }\n      return students;\n    } catch (error) {\n      setMessage(`Error fetching students: ${error.message}`);\n      return [];\n    }\n  };\n  const fetchStudentNames = async addresses => {\n    try {\n      const newNames = {};\n      const addressesToFetch = addresses.filter(addr => !studentNames[addr]);\n      if (addressesToFetch.length > 0) {\n        const names = await Promise.all(addressesToFetch.map(async addr => {\n          try {\n            const name = await contract.methods.getUserName(addr).call();\n            return {\n              addr,\n              name: name.length > 0 ? name : \"Unnamed\"\n            };\n          } catch (error) {\n            console.error(`Error fetching name for ${addr}:`, error);\n            return {\n              addr,\n              name: \"Unnamed\"\n            };\n          }\n        }));\n        names.forEach(({\n          addr,\n          name\n        }) => {\n          newNames[addr] = name;\n        });\n        setStudentNames(prev => ({\n          ...prev,\n          ...newNames\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error in batch name fetching:\", error);\n    }\n  };\n  const fetchAttendance = async () => {\n    if (!sectionId) {\n      setMessage(\"Please enter a section ID.\");\n      return;\n    }\n    let students = studentAddresses;\n    if (!isStudentMode && students.length === 0) {\n      students = await fetchStudentsInSection(sectionId);\n      setStudentAddresses(students);\n    }\n    if (students.length === 0) {\n      setMessage(\"No students found for this section.\");\n      return;\n    }\n    try {\n      await fetchStudentNames(students);\n      const data = await Promise.all(students.map(async student => {\n        const result = await contract.methods.getCombinedAttendance(student, sectionId).call({\n          from: account\n        });\n        return {\n          student,\n          name: studentNames[student] || \"Unnamed\",\n          attended: parseInt(result.attended),\n          total: parseInt(result.total),\n          percentage: result.total > 0 ? parseInt(result.attended) / parseInt(result.total) * 100 : 0\n        };\n      }));\n      sortData(data);\n      setMessage(\"\");\n    } catch (error) {\n      setMessage(`Error fetching attendance: ${error.message}`);\n      setAttendanceData([]);\n    }\n  };\n  const sortData = data => {\n    const sorted = [...data].sort((a, b) => {\n      const valueA = a[sortField];\n      const valueB = b[sortField];\n      return sortOrder === \"asc\" ? valueA - valueB : valueB - valueA;\n    });\n    setAttendanceData(sorted);\n  };\n  const handleSort = () => {\n    sortData(attendanceData);\n  };\n  const handleAddStudents = () => {\n    const addresses = inputAddresses.split(\",\").map(addr => addr.trim()).filter(addr => addr.startsWith(\"0x\") && addr.length === 42);\n    setStudentAddresses(isStudentMode ? [account] : [...new Set([...studentAddresses, ...addresses])]);\n    setInputAddresses(\"\");\n  };\n  const filterAttendance = () => {\n    if (!threshold || isNaN(threshold)) {\n      setMessage(\"Please enter a valid threshold percentage.\");\n      return;\n    }\n    const threshNum = parseFloat(threshold);\n    const filtered = attendanceData.filter(data => filterType === \"above\" ? data.percentage >= threshNum : data.percentage <= threshNum);\n    setAttendanceData(filtered);\n    setMessage(`Filtered to show students ${filterType} ${threshNum}% attendance.`);\n  };\n  const resetList = () => {\n    setAttendanceData([]);\n    setStudentAddresses(isStudentMode ? [account] : []);\n    setSectionId(\"\");\n    setThreshold(\"\");\n    setSortField(\"percentage\");\n    setSortOrder(\"asc\");\n    setMessage(\"\");\n  };\n  const exportToCSV = () => {\n    if (attendanceData.length === 0) {\n      setMessage(\"No data to export\");\n      return;\n    }\n    const headers = [\"Name\", \"Address\", \"Section\", \"Attended\", \"Total\", \"Percentage\"];\n    const csvData = attendanceData.map(data => [data.name, data.student, sectionId, data.attended, data.total, data.percentage.toFixed(2) + \"%\"]);\n    const csvContent = [headers.join(\",\"), ...csvData.map(row => row.join(\",\"))].join(\"\\n\");\n    const blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", `attendance_section_${sectionId}_${new Date().toISOString().split('T')[0]}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  useEffect(() => {\n    if (isStudentMode && contract && account) {\n      setStudentAddresses([account]);\n      fetchStudentNames([account]);\n    }\n  }, [contract, account, isStudentMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"records\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Attendance Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isStudentMode ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Viewing attendance for: \", studentNames[account] || \"Unnamed\", \" (\", account, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Enter student addresses (comma-separated, e.g., 0x123..., 0x456...); leave blank to auto-fetch\",\n            value: inputAddresses,\n            onChange: e => setInputAddresses(e.target.value),\n            rows: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"att\",\n              onClick: handleAddStudents,\n              children: \"Add Students\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Section ID\",\n            value: sectionId,\n            onChange: e => setSectionId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"att\",\n            onClick: fetchAttendance,\n            children: \"Fetch Attendance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), !isStudentMode && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        style: {\n          marginTop: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: sortField,\n          onChange: e => setSortField(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"percentage\",\n            children: \"Percentage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"attended\",\n            children: \"Attended\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"total\",\n            children: \"Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: sortOrder,\n          onChange: e => setSortOrder(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"asc\",\n            children: \"Ascending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"desc\",\n            children: \"Descending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"att\",\n          onClick: handleSort,\n          children: \"Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Threshold (%)\",\n          value: threshold,\n          onChange: e => setThreshold(e.target.value),\n          style: {\n            width: \"100px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filterType,\n          onChange: e => setFilterType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"above\",\n            children: \"Above\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"below\",\n            children: \"Below\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"att\",\n          onClick: filterAttendance,\n          children: \"Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"att\",\n          onClick: resetList,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 15\n        }, this), attendanceData.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"att\",\n          onClick: exportToCSV,\n          children: \"Export to CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this), attendanceData.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: attendanceData.map((data, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Student: \", data.name, \" (\", data.student, \") | Section: \", sectionId, \" | Attended: \", data.attended, \" | Total: \", data.total, \" | Percentage: \", data.percentage.toFixed(2), \"%\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Students: \", attendanceData.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Average Attendance: \", (attendanceData.reduce((sum, data) => sum + data.percentage, 0) / attendanceData.length).toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No attendance data available yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 7\n  }, this);\n};\n_s(AttendanceList, \"Q18loaL2CLvhpAUN8FKV0HOOMbc=\");\n_c = AttendanceList;\nexport default AttendanceList;\nvar _c;\n$RefreshReg$(_c, \"AttendanceList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","AttendanceList","contract","account","isStudentMode","_s","studentAddresses","setStudentAddresses","inputAddresses","setInputAddresses","sectionId","setSectionId","attendanceData","setAttendanceData","threshold","setThreshold","filterType","setFilterType","sortField","setSortField","sortOrder","setSortOrder","message","setMessage","studentNames","setStudentNames","fetchStudentsInSection","section","sectionCounter","methods","call","from","parseInt","students","MAX_STUDENTS","i","student","sectionStudents","push","error","fetchStudentNames","addresses","newNames","addressesToFetch","filter","addr","length","names","Promise","all","map","name","getUserName","console","forEach","prev","fetchAttendance","data","result","getCombinedAttendance","attended","total","percentage","sortData","sorted","sort","a","b","valueA","valueB","handleSort","handleAddStudents","split","trim","startsWith","Set","filterAttendance","isNaN","threshNum","parseFloat","filtered","resetList","exportToCSV","headers","csvData","toFixed","csvContent","join","row","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","Date","toISOString","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","rows","onClick","style","marginTop","width","index","reduce","sum","_c","$RefreshReg$"],"sources":["/Users/dhruv/AttendEase-Caffeine-Coders--1/FRONTEND/src/components/Lists/AttendanceList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst AttendanceList = ({ contract, account, isStudentMode = false }) => {\n  const [studentAddresses, setStudentAddresses] = useState(isStudentMode ? [account] : []);\n  const [inputAddresses, setInputAddresses] = useState(\"\");\n  const [sectionId, setSectionId] = useState(\"\");\n  const [attendanceData, setAttendanceData] = useState([]);\n  const [threshold, setThreshold] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"above\"); // \"above\" or \"below\"\n  const [sortField, setSortField] = useState(\"percentage\"); // \"percentage\", \"attended\", \"total\"\n  const [sortOrder, setSortOrder] = useState(\"asc\"); // \"asc\" or \"desc\"\n  const [message, setMessage] = useState(\"\");\n  const [studentNames, setStudentNames] = useState({});\n  \n  const fetchStudentsInSection = async (section) => {\n    try {\n      const sectionCounter = await contract.methods.sectionCounter().call({ from: account });\n      if (parseInt(section) >= sectionCounter) {\n        setMessage(\"Invalid section ID.\");\n        return [];\n      }\n\n      const students = [];\n      const MAX_STUDENTS = 100;\n      for (let i = 0; i < MAX_STUDENTS; i++) {\n        const student = await contract.methods\n          .sectionStudents(section, i)\n          .call({ from: account });\n        if (student === \"0x0000000000000000000000000000000000000000\" || !student) break;\n        students.push(student);\n      }\n      return students;\n    } catch (error) {\n      setMessage(`Error fetching students: ${error.message}`);\n      return [];\n    }\n  };\n\n  const fetchStudentNames = async (addresses) => {\n    try {\n      const newNames = {};\n      const addressesToFetch = addresses.filter(addr => !studentNames[addr]);\n      \n      if (addressesToFetch.length > 0) {\n        const names = await Promise.all(\n          addressesToFetch.map(async (addr) => {\n            try {\n              const name = await contract.methods.getUserName(addr).call();\n              return { addr, name: name.length > 0 ? name : \"Unnamed\" };\n            } catch (error) {\n              console.error(`Error fetching name for ${addr}:`, error);\n              return { addr, name: \"Unnamed\" };\n            }\n          })\n        );\n        \n        names.forEach(({ addr, name }) => {\n          newNames[addr] = name;\n        });\n        \n        setStudentNames(prev => ({ ...prev, ...newNames }));\n      }\n    } catch (error) {\n      console.error(\"Error in batch name fetching:\", error);\n    }\n  };\n\n  const fetchAttendance = async () => {\n    if (!sectionId) {\n      setMessage(\"Please enter a section ID.\");\n      return;\n    }\n\n    let students = studentAddresses;\n    if (!isStudentMode && students.length === 0) {\n      students = await fetchStudentsInSection(sectionId);\n      setStudentAddresses(students);\n    }\n\n    if (students.length === 0) {\n      setMessage(\"No students found for this section.\");\n      return;\n    }\n\n    try {\n      await fetchStudentNames(students);\n\n      const data = await Promise.all(\n        students.map(async (student) => {\n          const result = await contract.methods\n            .getCombinedAttendance(student, sectionId)\n            .call({ from: account });\n          \n          return {\n            student,\n            name: studentNames[student] || \"Unnamed\",\n            attended: parseInt(result.attended),\n            total: parseInt(result.total),\n            percentage: result.total > 0 ? (parseInt(result.attended) / parseInt(result.total)) * 100 : 0,\n          };\n        })\n      );\n      sortData(data);\n      setMessage(\"\");\n    } catch (error) {\n      setMessage(`Error fetching attendance: ${error.message}`);\n      setAttendanceData([]);\n    }\n  };\n\n  const sortData = (data) => {\n    const sorted = [...data].sort((a, b) => {\n      const valueA = a[sortField];\n      const valueB = b[sortField];\n      return sortOrder === \"asc\" ? valueA - valueB : valueB - valueA;\n    });\n    setAttendanceData(sorted);\n  };\n\n  const handleSort = () => {\n    sortData(attendanceData);\n  };\n\n  const handleAddStudents = () => {\n    const addresses = inputAddresses\n      .split(\",\")\n      .map((addr) => addr.trim())\n      .filter((addr) => addr.startsWith(\"0x\") && addr.length === 42);\n    setStudentAddresses(isStudentMode ? [account] : [...new Set([...studentAddresses, ...addresses])]);\n    setInputAddresses(\"\");\n  };\n\n  const filterAttendance = () => {\n    if (!threshold || isNaN(threshold)) {\n      setMessage(\"Please enter a valid threshold percentage.\");\n      return;\n    }\n    const threshNum = parseFloat(threshold);\n    const filtered = attendanceData.filter((data) =>\n      filterType === \"above\" ? data.percentage >= threshNum : data.percentage <= threshNum\n    );\n    setAttendanceData(filtered);\n    setMessage(`Filtered to show students ${filterType} ${threshNum}% attendance.`);\n  };\n\n  const resetList = () => {\n    setAttendanceData([]);\n    setStudentAddresses(isStudentMode ? [account] : []);\n    setSectionId(\"\");\n    setThreshold(\"\");\n    setSortField(\"percentage\");\n    setSortOrder(\"asc\");\n    setMessage(\"\");\n  };\n\n  const exportToCSV = () => {\n    if (attendanceData.length === 0) {\n      setMessage(\"No data to export\");\n      return;\n    }\n\n    const headers = [\"Name\", \"Address\", \"Section\", \"Attended\", \"Total\", \"Percentage\"];\n    const csvData = attendanceData.map(data => [\n      data.name,\n      data.student,\n      sectionId,\n      data.attended,\n      data.total,\n      data.percentage.toFixed(2) + \"%\"\n    ]);\n\n    const csvContent = [\n      headers.join(\",\"),\n      ...csvData.map(row => row.join(\",\"))\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", `attendance_section_${sectionId}_${new Date().toISOString().split('T')[0]}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  useEffect(() => {\n    if (isStudentMode && contract && account) {\n      setStudentAddresses([account]);\n      fetchStudentNames([account]);\n    }\n  }, [contract, account, isStudentMode]);\n\n    return (\n      <div className=\"records\">\n        <div>\n          <h3>Attendance Records</h3>\n          <div>\n            {isStudentMode ? (\n              <p>Viewing attendance for: {studentNames[account] || \"Unnamed\"} ({account})</p>\n            ) : (\n              <>\n                <textarea\n                  placeholder=\"Enter student addresses (comma-separated, e.g., 0x123..., 0x456...); leave blank to auto-fetch\"\n                  value={inputAddresses}\n                  onChange={(e) => setInputAddresses(e.target.value)}\n                  rows=\"3\"\n                />\n                <div className=\"button-group\">\n                  <button className=\"att\" onClick={handleAddStudents}>Add Students</button>\n                </div>\n              </>\n            )}\n            <div className=\"button-group\">\n              <input\n                type=\"number\"\n                placeholder=\"Section ID\"\n                value={sectionId}\n                onChange={(e) => setSectionId(e.target.value)}\n              />\n              <button className=\"att\" onClick={fetchAttendance}>Fetch Attendance</button>\n            </div>\n          </div>\n    \n          {!isStudentMode && (\n            <div className=\"button-group\" style={{ marginTop: \"10px\" }}>\n              <select\n                value={sortField}\n                onChange={(e) => setSortField(e.target.value)}\n              >\n                <option value=\"percentage\">Percentage</option>\n                <option value=\"attended\">Attended</option>\n                <option value=\"total\">Total</option>\n              </select>\n              <select\n                value={sortOrder}\n                onChange={(e) => setSortOrder(e.target.value)}\n              >\n                <option value=\"asc\">Ascending</option>\n                <option value=\"desc\">Descending</option>\n              </select>\n              <button className=\"att\" onClick={handleSort}>Sort</button>\n              <input\n                type=\"number\"\n                placeholder=\"Threshold (%)\"\n                value={threshold}\n                onChange={(e) => setThreshold(e.target.value)}\n                style={{ width: \"100px\" }}\n              />\n              <select\n                value={filterType}\n                onChange={(e) => setFilterType(e.target.value)}\n              >\n                <option value=\"above\">Above</option>\n                <option value=\"below\">Below</option>\n              </select>\n              <button className=\"att\" onClick={filterAttendance}>Filter</button>\n              <button className=\"att\" onClick={resetList}>Reset</button>\n              {attendanceData.length > 0 && (\n                <button className=\"att\" onClick={exportToCSV}>Export to CSV</button>\n              )}\n            </div>\n          )}\n    \n          {attendanceData.length > 0 ? (\n            <>\n              <ul>\n                {attendanceData.map((data, index) => (\n                  <li key={index}>\n                    Student: {data.name} ({data.student}) | Section: {sectionId} | Attended: {data.attended} | \n                    Total: {data.total} | Percentage: {data.percentage.toFixed(2)}%\n                  </li>\n                ))}\n              </ul>\n              <p>Total Students: {attendanceData.length}</p>\n              <p>Average Attendance: {\n                (attendanceData.reduce((sum, data) => sum + data.percentage, 0) / attendanceData.length).toFixed(2)\n              }%</p>\n            </>\n          ) : (\n            <p>No attendance data available yet.</p>\n          )}\n          {message && <p>{message}</p>}\n        </div>\n      </div>\n    );\n};\n\nexport default AttendanceList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}